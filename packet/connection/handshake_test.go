package connection

import (
	"encoding/hex"
	"fmt"
	"mysql-protocol/packet/generic"
	"testing"
)

var handshake = []byte{0x4a, 0x00, 0x00, 0x00, 0x0a, 0x38, 0x2e, 0x30, 0x2e, 0x32, 0x35, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x3e, 0x6d, 0x4c, 0x14, 0x49, 0x75, 0x4c, 0x00, 0xff, 0xff, 0xff, 0x02, 0x00, 0xff, 0xcf, 0x15, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x27, 0x6b, 0x43, 0x5c, 0x08, 0x54, 0x7c, 0x36, 0x25, 0x6c, 0x61, 0x1d, 0x00, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00}

func TestParseHandshake(t *testing.T) {
	packet, err := ParseHandshake(handshake)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%+v", packet)
}

var handshakeResponse = []byte{0x9a, 0x00, 0x00, 0x01, 0x05, 0xa6, 0x3a, 0x00, 0xff, 0xff, 0xff, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x6f, 0x6f, 0x74, 0x00, 0x14, 0xab, 0x3a, 0x14, 0x7d, 0xa0, 0x78, 0xf8, 0x9b, 0x4b, 0x81, 0x7e, 0x7a, 0x64, 0xf5, 0xe0, 0x2b, 0x73, 0x65, 0xa7, 0xae, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x00, 0x49, 0x0c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x07, 0x70, 0x79, 0x6d, 0x79, 0x73, 0x71, 0x6c, 0x04, 0x5f, 0x70, 0x69, 0x64, 0x05, 0x34, 0x31, 0x36, 0x37, 0x34, 0x0f, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x05, 0x31, 0x2e, 0x30, 0x2e, 0x32, 0x0c, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x05, 0x6d, 0x79, 0x63, 0x6c, 0x69}

func TestParseHandshakeResponse(t *testing.T) {
	packet, err := ParseHandshakeResponse(handshakeResponse)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%+v", packet)
}

func TestHandshakeResponse_Dump(t *testing.T) {
	var p HandshakeResponse
	p.Seq = 1
	p.ClientCapabilityFlags |= generic.CLIENT_PROTOCOL_41 |
		generic.CLIENT_SECURE_CONNECTION |
		generic.CLIENT_LONG_PASSWORD |
		generic.CLIENT_LONG_FLAG |
		generic.CLIENT_TRANSACTIONS |
		generic.CLIENT_INTERACTIVE |
		generic.CLIENT_MULTI_RESULTS

	p.MaxPacketSize = 16777215
	p.SetCharacterSet(Utf8GeneralCi)
	p.SetUsername("root")
	salt1 := []byte{1, 62, 109, 76, 20, 73, 117, 76}
	salt2 := []byte{39, 107, 67, 92, 8, 84, 124, 54, 37, 108, 97, 29, 0}
	salt := make([]byte, len(salt1)+len(salt2)-1)
	copy(salt, salt1)
	copy(salt[len(salt1):], salt2[:len(salt2)-1])
	if err := p.SetPassword(MySQLNativePassword, "Zggyy2019!", string(salt)); err != nil {
		t.Fatal(err)
	}
	p.SetAuthPluginName("mysql_native_password")
	p.AddAttribute("_client_name", "pymysql")
	p.AddAttribute("_pid", "41674")
	p.AddAttribute("_client_version", "1.0.2")
	p.AddAttribute("program_name", "mycli")

	dump := p.Dump()

	// dump string
	dumpFormat := append([]byte{0x00, 0x00}, dump...)
	fmt.Println(hex.Dump(dumpFormat))

	if len(dump) != len(handshakeResponse) {
		t.Fatal("len(dump)!=len(bs)")
	}
	for i, _ := range handshakeResponse {
		if dump[i] != handshakeResponse[i] {
			t.Fatalf("dump[%d](%x) !=bs[%d](%x)", i, dump[i], i, handshakeResponse[i])
		}
	}
}
